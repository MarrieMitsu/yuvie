// Mocks generated by Mockito 5.0.17 from annotations
// in yuvie/test/domain/usercases/movie/search_movies_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:yuvie/data/services/db/database.dart' as _i9;
import 'package:yuvie/domain/entities/genre.dart' as _i8;
import 'package:yuvie/domain/entities/movie.dart' as _i6;
import 'package:yuvie/domain/entities/movie_detail.dart' as _i7;
import 'package:yuvie/domain/entities/pagination.dart' as _i5;
import 'package:yuvie/domain/repositories/movie_repository.dart' as _i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [MovieRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRepository extends _i1.Mock implements _i3.MovieRepository {
  MockMovieRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<Error, _i2.Tuple2<_i5.PaginationEntity, List<_i6.MovieEntity>>>>
      searchRemoteMovies(Map<String, dynamic>? qp) => (super.noSuchMethod(
              Invocation.method(#searchRemoteMovies, [qp]),
              returnValue:
                  Future<_i2.Either<Error, _i2.Tuple2<_i5.PaginationEntity, List<_i6.MovieEntity>>>>.value(
                      _FakeEither_0<Error, _i2.Tuple2<_i5.PaginationEntity, List<_i6.MovieEntity>>>()))
          as _i4.Future<
              _i2.Either<Error, _i2.Tuple2<_i5.PaginationEntity, List<_i6.MovieEntity>>>>);
  @override
  _i4.Future<_i2.Either<Error, _i7.MovieDetailEntity>> getDetailRemoteMovie(
          int? movieId, Map<String, dynamic>? qp) =>
      (super.noSuchMethod(
          Invocation.method(#getDetailRemoteMovie, [movieId, qp]),
          returnValue: Future<_i2.Either<Error, _i7.MovieDetailEntity>>.value(
              _FakeEither_0<Error, _i7.MovieDetailEntity>())) as _i4
          .Future<_i2.Either<Error, _i7.MovieDetailEntity>>);
  @override
  _i4.Future<_i2.Either<Error, List<_i8.GenreEntity>>> getAllLocalGenre() =>
      (super.noSuchMethod(Invocation.method(#getAllLocalGenre, []),
          returnValue: Future<_i2.Either<Error, List<_i8.GenreEntity>>>.value(
              _FakeEither_0<Error, List<_i8.GenreEntity>>())) as _i4
          .Future<_i2.Either<Error, List<_i8.GenreEntity>>>);
  @override
  _i4.Future<_i2.Either<Error, _i2.Tuple2<_i5.PaginationEntity, List<_i6.MovieEntity>>>>
      getAllLocalMovie(int? page) => (super.noSuchMethod(
              Invocation.method(#getAllLocalMovie, [page]),
              returnValue:
                  Future<_i2.Either<Error, _i2.Tuple2<_i5.PaginationEntity, List<_i6.MovieEntity>>>>.value(
                      _FakeEither_0<Error, _i2.Tuple2<_i5.PaginationEntity, List<_i6.MovieEntity>>>()))
          as _i4.Future<
              _i2.Either<Error, _i2.Tuple2<_i5.PaginationEntity, List<_i6.MovieEntity>>>>);
  @override
  _i4.Future<_i2.Either<Error, _i7.MovieDetailEntity>> getDetailLocalMovie(
          int? movieId) =>
      (super.noSuchMethod(Invocation.method(#getDetailLocalMovie, [movieId]),
          returnValue: Future<_i2.Either<Error, _i7.MovieDetailEntity>>.value(
              _FakeEither_0<Error, _i7.MovieDetailEntity>())) as _i4
          .Future<_i2.Either<Error, _i7.MovieDetailEntity>>);
  @override
  _i4.Future<_i2.Either<Error, _i6.MovieEntity>> addLocalMovie(
          _i9.MovieWithGenreCompanion? entry) =>
      (super.noSuchMethod(Invocation.method(#addLocalMovie, [entry]),
              returnValue: Future<_i2.Either<Error, _i6.MovieEntity>>.value(
                  _FakeEither_0<Error, _i6.MovieEntity>()))
          as _i4.Future<_i2.Either<Error, _i6.MovieEntity>>);
  @override
  _i4.Future<_i2.Either<Error, _i2.Tuple2<_i6.MovieEntity, _i7.MovieDetailEntity>>>
      editLocalMovie(_i9.MovieWithGenreCompanion? entry) => (super.noSuchMethod(
              Invocation.method(#editLocalMovie, [entry]),
              returnValue:
                  Future<_i2.Either<Error, _i2.Tuple2<_i6.MovieEntity, _i7.MovieDetailEntity>>>.value(
                      _FakeEither_0<Error, _i2.Tuple2<_i6.MovieEntity, _i7.MovieDetailEntity>>()))
          as _i4.Future<
              _i2.Either<Error, _i2.Tuple2<_i6.MovieEntity, _i7.MovieDetailEntity>>>);
  @override
  _i4.Future<_i2.Either<Error, bool>> deleteLocalMovie(int? movieId) =>
      (super.noSuchMethod(Invocation.method(#deleteLocalMovie, [movieId]),
              returnValue: Future<_i2.Either<Error, bool>>.value(
                  _FakeEither_0<Error, bool>()))
          as _i4.Future<_i2.Either<Error, bool>>);
}
