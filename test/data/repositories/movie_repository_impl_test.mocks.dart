// Mocks generated by Mockito 5.0.17 from annotations
// in yuvie/test/data/repositories/movie_repository_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i7;

import 'package:drift/drift.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:yuvie/data/models/api/movies_get_details_api_model.dart' as _i3;
import 'package:yuvie/data/models/api/search_movie_api_model.dart' as _i2;
import 'package:yuvie/data/services/api/movies_api.dart' as _i8;
import 'package:yuvie/data/services/api/search_api.dart' as _i6;
import 'package:yuvie/data/services/db/database.dart' as _i5;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeSearchMovieApiModel_0 extends _i1.Fake
    implements _i2.SearchMovieApiModel {}

class _FakeMoviesGetDetailsApiModel_1 extends _i1.Fake
    implements _i3.MoviesGetDetailsApiModel {}

class _FakeMigrationStrategy_2 extends _i1.Fake
    implements _i4.MigrationStrategy {}

class _FakeMovieWithGenre_3 extends _i1.Fake implements _i5.MovieWithGenre {}

/// A class which mocks [SearchApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchApi extends _i1.Mock implements _i6.SearchApi {
  MockSearchApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.SearchMovieApiModel> searchMovies(Map<String, dynamic>? qp) =>
      (super.noSuchMethod(Invocation.method(#searchMovies, [qp]),
              returnValue: Future<_i2.SearchMovieApiModel>.value(
                  _FakeSearchMovieApiModel_0()))
          as _i7.Future<_i2.SearchMovieApiModel>);
}

/// A class which mocks [MoviesApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockMoviesApi extends _i1.Mock implements _i8.MoviesApi {
  MockMoviesApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i3.MoviesGetDetailsApiModel> getDetails(
          int? movieId, Map<String, dynamic>? qp) =>
      (super.noSuchMethod(Invocation.method(#getDetails, [movieId, qp]),
              returnValue: Future<_i3.MoviesGetDetailsApiModel>.value(
                  _FakeMoviesGetDetailsApiModel_1()))
          as _i7.Future<_i3.MoviesGetDetailsApiModel>);
}

/// A class which mocks [Database].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabase extends _i1.Mock implements _i5.Database {
  MockDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get schemaVersion =>
      (super.noSuchMethod(Invocation.getter(#schemaVersion), returnValue: 0)
          as int);
  @override
  _i4.MigrationStrategy get migration =>
      (super.noSuchMethod(Invocation.getter(#migration),
          returnValue: _FakeMigrationStrategy_2()) as _i4.MigrationStrategy);
  @override
  _i7.Future<List<_i5.Genre>> getAllGenre() =>
      (super.noSuchMethod(Invocation.method(#getAllGenre, []),
              returnValue: Future<List<_i5.Genre>>.value(<_i5.Genre>[]))
          as _i7.Future<List<_i5.Genre>>);
  @override
  _i7.Future<int> countMovies() =>
      (super.noSuchMethod(Invocation.method(#countMovies, []),
          returnValue: Future<int>.value(0)) as _i7.Future<int>);
  @override
  _i7.Future<List<_i5.MovieWithGenre>> getAllMovieWithGenre(
          {int? page = 1, int? limit = 10}) =>
      (super.noSuchMethod(
          Invocation.method(
              #getAllMovieWithGenre, [], {#page: page, #limit: limit}),
          returnValue: Future<List<_i5.MovieWithGenre>>.value(
              <_i5.MovieWithGenre>[])) as _i7.Future<List<_i5.MovieWithGenre>>);
  @override
  _i7.Future<_i5.MovieWithGenre> getMovieWithGenre(int? movieId) =>
      (super.noSuchMethod(Invocation.method(#getMovieWithGenre, [movieId]),
              returnValue:
                  Future<_i5.MovieWithGenre>.value(_FakeMovieWithGenre_3()))
          as _i7.Future<_i5.MovieWithGenre>);
  @override
  _i7.Future<_i5.MovieWithGenre> insertMovie(
          _i5.MovieWithGenreCompanion? entry) =>
      (super.noSuchMethod(Invocation.method(#insertMovie, [entry]),
              returnValue:
                  Future<_i5.MovieWithGenre>.value(_FakeMovieWithGenre_3()))
          as _i7.Future<_i5.MovieWithGenre>);
  @override
  _i7.Future<_i5.MovieWithGenre> updateMovie(
          _i5.MovieWithGenreCompanion? entry) =>
      (super.noSuchMethod(Invocation.method(#updateMovie, [entry]),
              returnValue:
                  Future<_i5.MovieWithGenre>.value(_FakeMovieWithGenre_3()))
          as _i7.Future<_i5.MovieWithGenre>);
  @override
  _i7.Future<bool> deleteMovie(int? movieId) =>
      (super.noSuchMethod(Invocation.method(#deleteMovie, [movieId]),
          returnValue: Future<bool>.value(false)) as _i7.Future<bool>);
}
