// Mocks generated by Mockito 5.0.17 from annotations
// in yuvie/test/presentation/bloc/remote_movie_cubit_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:yuvie/domain/entities/movie.dart' as _i7;
import 'package:yuvie/domain/entities/movie_detail.dart' as _i9;
import 'package:yuvie/domain/entities/pagination.dart' as _i6;
import 'package:yuvie/domain/repositories/movie_repository.dart' as _i2;
import 'package:yuvie/domain/usecases/movie/get_detail_remote_movie.dart'
    as _i8;
import 'package:yuvie/domain/usecases/movie/search_remote_movies.dart' as _i4;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeMovieRepository_0 extends _i1.Fake implements _i2.MovieRepository {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

/// A class which mocks [SearchRemoteMovies].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchRemoteMovies extends _i1.Mock
    implements _i4.SearchRemoteMovies {
  MockSearchRemoteMovies() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMovieRepository_0()) as _i2.MovieRepository);
  @override
  _i5.Future<_i3.Either<Error, _i3.Tuple2<_i6.PaginationEntity, List<_i7.MovieEntity>>>>
      execute(Map<String, dynamic>? qp) => (super.noSuchMethod(
              Invocation.method(#execute, [qp]),
              returnValue:
                  Future<_i3.Either<Error, _i3.Tuple2<_i6.PaginationEntity, List<_i7.MovieEntity>>>>.value(
                      _FakeEither_1<Error, _i3.Tuple2<_i6.PaginationEntity, List<_i7.MovieEntity>>>()))
          as _i5.Future<
              _i3.Either<Error, _i3.Tuple2<_i6.PaginationEntity, List<_i7.MovieEntity>>>>);
}

/// A class which mocks [GetDetailRemoteMovie].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetDetailRemoteMovie extends _i1.Mock
    implements _i8.GetDetailRemoteMovie {
  MockGetDetailRemoteMovie() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.MovieRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMovieRepository_0()) as _i2.MovieRepository);
  @override
  _i5.Future<_i3.Either<Error, _i9.MovieDetailEntity>> execute(
          int? movieId, Map<String, dynamic>? qp) =>
      (super.noSuchMethod(Invocation.method(#execute, [movieId, qp]),
          returnValue: Future<_i3.Either<Error, _i9.MovieDetailEntity>>.value(
              _FakeEither_1<Error, _i9.MovieDetailEntity>())) as _i5
          .Future<_i3.Either<Error, _i9.MovieDetailEntity>>);
}
